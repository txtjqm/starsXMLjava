
/* file created by intellij using gradle wizard
   looks like intellij ran "gradle init" and chose "application" - "java"  etc
   this caused gradle to generate sample source and test java code.
   ref: https://guides.gradle.org/building-java-applications/
*/
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0/userguide/java_library_plugin.html
 */

/* custom  sept 2020
   to run on pc, install java jdk, remove all gradle stuff except build.gradle using
    rm -r gradle gradlew    , then 
   download gradle jar file and run (git-bash example here)
   /c/local/gradle/gradle-6.6.1/bin/gradle wrapper
   then run ./gradlew customFatJar
   and see result with 
   cmd //c "tree /F" build     [runs dos command from git-bash]
   then run with:
    java -jar build/libs/all-in-one-jar2.jar

   git commands:
   [created repo on github and pasted command lines into pc bash window]
    git add .
    git commit -m "2 commit"
    git push -u origin main
*/
   
/* The Java plugin adds Java compilation along with testing and bundling capabilities to a project. It serves as the basis for many of the other JVM language Gradle plugins.
*/
plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// custom
// by adding this block it caused github action to run the test upon push
// and show results in the web console
test {
    useJUnit()
    maxHeapSize = '1G'
    filter {
        includeTestsMatching "*doReadXmlTest"
    }
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.0-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    // custom added for this project (copied from old project)
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-xml
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '2.11.0'
    // https://mvnrepository.com/artifact/net.sf.saxon/Saxon-HE
    compile group: 'net.sf.saxon', name: 'Saxon-HE', version: '10.2'
}

// custom
// from https://www.baeldung.com/gradle-fat-jar
// run with:    ./gradlew customFatJar
task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': ' celcord.jaxb.ReadXmlDemo2'
    }
    baseName = 'all-in-one-jar2'
    // from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    // need to exclude metadata or get a signed-jar error at runtime...
    from (configurations.compile.collect { entry -> zipTree(entry) }) {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }
    with jar
}
